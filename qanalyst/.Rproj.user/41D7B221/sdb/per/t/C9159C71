{
    "contents" : "# Aggiungere possibilità di modificare parametri delle altre carte (c,xbar-s,xbar-r,I,mr, ecc..)\n\n################################################################################\n#' set_param_generic\n#'\n#' Set user defined parameters in control chart object\n#'\n#' @param data an object of class spc\n#' @param new_param a single value (constant) or a numeric vector\n#' @param replace_param parameter to be replaced (center, lcl or ucl)\n#' @importFrom lazyeval interp\n#' @importFrom dplyr %>% select_ mutate_ rename_\n#' @return An object of class spc\n#' @export\n#'\nset_param_generic_ <- function(data, new_param, replace_param){\n\n    stat_data <- data %>% select_( interp(~ -x, x = as.name(replace_param)))\n    stat_data <- stat_data %>% mutate_(new_param_ = new_param )\n    new <- as.character(replace_param)\n    stat_data <- rename_(stat_data, .dots=setNames(list(\"new_param_\"), new))\n    class(stat_data) <- class(data)\n    return(stat_data)\n}\n\n#-------------------------------------------------------------------------------\n################################################################################\n# S3 methods for parameter settings in each chart.\n\n#' set_param\n#'\n#' Generic S3 method for setting chart parameters if known.\n#'\n#' @param data a SPC object\n#' @export\n#'\nset_param <- function(data, ...){\n    UseMethod(\"set_param\", data)\n}\n\n################################################################################\n# Da errore siccome è necessario fare in modo che constant accetti dei vettori come input.\n# Verificare\n\n#' set_param.s\n#'\n#' Set the s chart parameter sigma.\n#'\n#' @param data an object of class s\n#' @param param_sigma the parameter of the s chart\n#' @importFrom dplyr mutate mutate_ %>%\n#' @importFrom chartconstants constant\n#' @return  An object of class s\n#' @export\n#'\nset_param.s <- function(data, param_sigma){\n\n    # Center lcl, ucl formulas\n    new_center <- \"center * c4\"\n    new_ucl <- \"center + 3 * center * sqrt(1 - c4^2) / c4\"\n    new_lcl <- \"center - 3 * center * sqrt(1 - c4^2) / c4\"\n\n    # Add constant c4\n    stat_data <- data %>% mutate(center = param_sigma,\n                                c4 = constant(n, c4))\n\n    # Edit center\n    stat_data <- stat_data %>% mutate_(center = new_center)\n\n    # Edit lcl,ucl\n    stat_data <- stat_data %>% mutate_(lcl = new_lcl,\n                                       ucl = new_ucl)\n\n    # Filter\n    stat_data <- stat_data %>% select(-c4)\n\n    # Set class\n    class(stat_data) <- class(data)\n\n    # Return\n    return(stat_data)\n}\n\n################################################################################\n#' set_param.p_chart\n#'\n#' If the fraction of non-conforming items P is known, then you can set it in the chart.\n#'\n#' @param data an object of class p_chart\n#' @param param_p the P parameter of the p chart\n#' @importFrom dplyr mutate mutate_ %>%\n#' @return  An object of class p_chart\n#' @export\n#'\nset_param.p_chart <- function(data, param_p){\n\n    # lcl, ucl formulas\n    new_ucl <- \"center + 3 * sqrt(center*(1 - center) / n)\"\n    new_lcl <- \"center - 3 * sqrt(center*(1 - center) / n)\"\n\n    # Edit center\n    stat_data <- data %>% mutate(center = param_p)\n\n    # Edit lcl,ucl\n    stat_data <- stat_data %>% mutate_(lcl = new_lcl,\n                                       ucl = new_ucl)\n\n    # Set to 0 negative lcls\n    stat_data <- stat_data %>% mutate(lcl = replace(lcl, which(lcl < 0), 0))\n\n    # Set class\n    class(stat_data) <- class(data)\n\n    # Return\n    return(stat_data)\n}\n\n################################################################################\n#' set_param.c_chart\n#'\n#' Set the Poisson's distribution parameter C in the c chart.\n#'\n#' @param data an object of class c_chart\n#' @param param_c the C parameter of the c chart\n#' @importFrom dplyr mutate mutate_ %>%\n#' @return  An object of class c_chart\n#' @export\n#'\nset_param.c_chart <- function(data, param_c){\n\n    # lcl, ucl formulas\n    new_ucl <- \"center + 3 * sqrt(center)\"\n    new_lcl <- \"center - 3 * sqrt(center)\"\n\n    # Edit center\n    stat_data <- data %>% mutate(center = param_c)\n\n    # Edit lcl,ucl\n    stat_data <- stat_data %>% mutate_(lcl = new_lcl,\n                                       ucl = new_ucl)\n\n    # Set to lcl in case it's negative\n    stat_data <- stat_data %>% mutate(lcl = replace(lcl, which(lcl < 0), 0))\n\n    # Set class\n    class(stat_data) <- class(data)\n\n    # Return\n    return(stat_data)\n}\n",
    "created" : 1456846872814.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1694670404",
    "id" : "C9159C71",
    "lastKnownWriteTime" : 1456850281,
    "path" : "C:/Users/Michy/Desktop/Andrea/pacchetti R/control_chart_package/qanalyst/R/user_set_param.R",
    "project_path" : "R/user_set_param.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}